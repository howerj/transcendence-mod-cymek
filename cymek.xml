<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE TranscendenceExtension
[
	<!ENTITY UNIDExtensionHornet	"0xD539002F">
	<!ENTITY rsArmorHUDShip_Hornet	"0xD539002E">
	<!ENTITY rsHornetArmorSingle		"0xD539002D"> 
	<!ENTITY rsHornetLarge			"0xD539002C">
	<!ENTITY scPlayerHornetBase 	"0xD539002B">
	<!ENTITY scHornetPlayer 		"0xD539002A">
	<!ENTITY itCymekMicroDeflector		        "0xD5390000">
	<!ENTITY itCymekNaniteProjector "0xD5390001">
	<!ENTITY itCymekNanoSteelArmor "0xD5390002">
	<!ENTITY itEmergencySupplies "0xD5390003">
	<!ENTITY stPlayerCargoContainer "0xD5390006">
	<!ENTITY itPlayerCargoContainer "0xD5390007">
	<!ENTITY itAmmoBoxKM100 "0xD5390008">
	<!ENTITY itAmmoBoxSapiens "0xD5390009">
	<!ENTITY rsBarrelBomb	 	"0xD539000A">
	<!ENTITY vtBarrelBombFire	 "0xD539000B">
	<!ENTITY itBarrelBomb	 	"0xD539000C">
	<!ENTITY itMinersSmugglingCargoHold "0xD539000D">
	<!ENTITY itBioTechMod "0xD539000E">
	<!ENTITY itBrainInAVat "0xD539000F">
	<!ENTITY itCymekOmniMiningLaser "0xD5390010">
	<!ENTITY itMetalBlitz "0xD5390011">
	<!ENTITY itPersonalCDMShard "0xD5390012">
	<!ENTITY itMiningComputerROM "0xD5390013">
	<!ENTITY dsNameHabitat "0xD5390014">
	<!ENTITY itAmmoBoxCymekTitanium "0xD5390015">
	<!ENTITY itAmmoBoxCymekUranium "0xD5390016"> 
	<!ENTITY itCymekTitaniumSlug "0xD5390017">
	<!ENTITY itCymekUraniumSlug "0xD5390018"> 
	<!ENTITY itCymekLauncher "0xD5390019"> 
	<!ENTITY itAmmoBoxCymekBlast "0xD539001A"> 
	<!ENTITY itCymekBlastSlug "0xD539001B"> 
	<!ENTITY itAmmoBoxCymekIon "0xD539001C">
	<!ENTITY itCymekIonSlug "0xD539001D"> 
	<!ENTITY itAmmoBoxCymekAntiMatter "0xD539001E">
	<!ENTITY itCymekAntiMatterSlug "0xD539001F"> 
	<!ENTITY itAmmoBoxCymekParticle "0xD5390020">
	<!ENTITY itCymekParticleSlug "0xD5390021"> 
	<!ENTITY itBetterThanLifeHeadset "0xD5390022"> 
	<!ENTITY itCymekSentinel "0xD5390023"> 
	<!ENTITY scCymekSentinel "0xD5390024"> 
	<!ENTITY itCymekNanoTitaniumArmor "0xD5390025"> 
	<!ENTITY itCymekLaser "0xD5390026">
	<!ENTITY itCymekNanoFeedstock "0xD5390027">
	<!ENTITY itNanoFabricator "0xD5390028">
	<!ENTITY dsNanoFabricator "0xD5390029">
	<!ENTITY scHornetPlayerCDM "0xD5390040">
]>

<!--

Mod Site: <https://github.com/howerj/transcendence-mod-cymek>

* Author: Richard James Howe

References/Mods

* FAD's Hornet Battle Pod Player Ship: http://xelerus.de/index.php?s=mod&id=18&d=0
* Shivian Hunter's Hornet Battle Pod Player Ship: http://xelerus.de/index.php?s=mod&id=1223&d=1
* Soggydoggy's One Piece Armor Mod: http://xelerus.de/index.php?s=mod&id=358&d=1
* darksider's Barrel Launcher: http://xelerus.de/index.php?s=mod&id=244

To Do / Ideas:

* Build instructions / Add a release
* Recall auton option
* Upgrade recipes via ROM? Also fabricate armor patches from ore, nanos from ore, get a tech/craft tree going
* Add timer / charge to nano-factory
* Make your own habitable station and faction, whatever the system, including Elysium,
	generates credits with redoable missions.
* Lower level linked fired devices
* Advanced scanner; longer range / find containers, ships
* Solar fuel collector; Fuel harvesting station - place near sun, makes fuel, perhaps make
a solar collector device that operated like the old versions (which filled up your tank)
* Split fuel assemblies (need to generate multiple items)
* Different version of jump drive that can be created in nano-factory
* Add shield that you can change damage absorption type
* High level device; zero-point energy source for infinite energy, 2 devie slots
* A disposable version of the nano-factory could be made, nano-formers.
* Convert slave coffins to brains in a vat?
* Add disposable launcher recipe back in?

-->


<TranscendenceExtension 
	UNID="&UNIDExtensionHornet;" 
	apiVersion="53" 
	name="Cymek Industries" 
	credits="howerj/HornetBattlePodsRule <https://github.com/howerj/cymek>, darksider (barrel bomb), FAD's hornet battle pod mod, Shivian Hunter's hornet battle pod mod, Soggydoggy's one piece armor mod, and more!"
	>
	<Library UNID="&unidHumanSpaceLibrary;"/>
	<Image UNID="&rsArmorHUDShip_Hornet;" bitmap="resources/ArmorHUDShip_Hornet.jpg"/>
	<Image UNID="&rsHornetArmorSingle;" bitmap="resources/OneArmorHUD.bmp"/>
	<Image UNID="&rsHornetLarge;" bitmap="resources/LargeHornet.jpg" bitmask="resources/LargeHornetMask.bmp"/>
	<Image UNID="&rsBarrelBomb;"	bitmap="resources/barrelbomb.jpg"	bitmask="resources/barrelbombmask.bmp" backColor="0x00000000"/>

	<ItemType UNID="&itCymekNanoFeedstock;"
			name=				"nano feedstock"
			level=				"2"
			value=				"100"
			mass=				"1000"
			frequency=			"uncommon"
			attributes=			"consumable, res, humanTech"

			description=		"A container of slurry suitable as a generic medium and energy source for the manufacture of nano-fabricated goods. Crafting some objects may require other ore or objects."
			>

		<Image imageID="&rsItems1;" imageX="288" imageY="0" imageWidth="96" imageHeight="96"/>
	</ItemType>

	<Globals>
		(block Nil
			(setq cymekCalcFabrication (lambda (theRecipe theSource theFoundry)
				(block (
					(theItem (cymekCreateItem theRecipe 1))
					(currencyUsed (objGetProperty (or theFoundry gSource) 'currency))

					;	Describe the components needed
					(theComponents
						(map (@ theRecipe 'components) theDesc
							(itmCreate (@ theDesc 'item) (@ theDesc 'count))
							)
						)

					;	Compute the total price of the components
						
					(componentPrice
						(map theComponents 'reduceSum theComponent
							;	For devices we assume a damaged device
							(if (itmMatches theComponent "d")
								(* (itmGetCount theComponent) (itmGetPrice (itmSet@ theComponent 'damaged True) currencyUsed))
								(* (itmGetCount theComponent) (itmGetPrice theComponent currencyUsed))
								)
							)
						)
						

					(markUp (@ theRecipe 'markUp))
					(workPrice
						(switch
							;	If markUp is an integer, assume it is the cost of the work
							;	as a percent of the component cost. E.g., 10 = 10% of component
							;	cost.
							(and markUp (= (typeof markUp) 'int32))
								(int (round (* componentPrice (/ markUp 100))))

							;	Otherwise, we expect a double such that 0.1 = 10% of component
							;	cost.
							markUp
								(int (round (* componentPrice markUp)))

							;	Otherwise default tinker calculation where  total cost of the work
							;	compensates for any difference between the input and output prices.
							(max 50 (intRoundUp (- (itmGetPrice theItem) componentPrice) 25))
							)
						)
					(workCost
						(or
							;	Recipe totalCost will override any other calculations
							(@ theRecipe 'totalCost)

							;	Otherwise add extraCost to the calculated price
							(+ workPrice (@ theRecipe 'extraCost))
							)
						)

					;	For each required component, add up the number of items the player
					;	actually has. Note that we accept damaged items.
						
					(availableComponents
						(map theComponents theComponent
							(block (
								(componentsAvail (rpgCalcComponentsAvailable (or theSource gPlayerShip) theComponent))
								)
								{
									item: theComponent
									available: (@ componentsAvail 'availCount)
									}
								)
							)
						)
					
					;	Figure out how much cargo space we need for each item
					(spaceNeeded
						(-
							(* (itmGetMass theItem) (itmGetCount theItem))
							(map theComponents 'reduceSum theComponent
								(* (itmGetMass (@ theComponent 'item)) (@ theComponent 'count))
								)
							)
						)

					; BUG: This is not working for some reason, but only when using itCymekNanoFeedstock as an ingredient, for some reason...
					(maxCountSpace
						(if (gr spaceNeeded 0)
							(int (/ (objGetCargoSpaceLeft (or theSource gPlayerShip)) spaceNeeded))
							1000
							)
						)

					;	Figure out the maximum number of items we could create
						
					(maxCountPrice
						(if (gr workCost 0)
							(int (/ (objGetBalance (or theSource gPlayerShip) currencyUsed) workCost))
							1000
							)
						)

					;	Now compute the max count based on component availability

					(maxCount
						; BUG: Note that maxCountSpace and maxCountPrice are commented out...price is not needed, space is.
						(min ; maxCountSpace maxCountPrice
							(if availableComponents
								(map availableComponents 'reduceMin theEntry
									(int (/ (@ theEntry 'available) (itmGetCount (@ theEntry 'item))))
									)
								1000
								)
							)
						)
					)

					;	Return a structure describing various aspects of the fabrication
					
					{
						item: theItem
						recipe: theRecipe
						
						;	This is a list of items (with counts) required to fabricate.
						
						componentsNeeded: theComponents
						componentsNeededDesc: (strItemList theComponents 0x0108)
						
						;	These fields determine various prices
						
						componentCost: componentPrice
						currencyUsed: currencyUsed
						workCost: workCost
						
						;	This is a list of structures describing what components the
						;	player has available. Each struct has two fields:
						;
						;	item: One of the items required (with counts)
						;	available: The number of this item the player has (including
						;		damaged.
						
						componentsAvail: availableComponents
						
						;	This is a structure suitable for an ItemListDisplay control

						itemListDisplay:
							(map availableComponents 'excludeNil theEntry
								{
									item: (@ theEntry 'item)
									enabled: (geq (@ theEntry 'available) (itmGetCount (@ theEntry 'item)))
									}
								)

						;	Maximum number of items we can fabricate
						
						maxFabCount: maxCount
						maxCount: maxCount
						
						;	Missing components
						
						componentsMissing: 
							(map availableComponents 'excludeNil theEntry 
								(if (eq (@ theEntry 'available) 0)
									(@ theEntry 'item)
									)
								)
						
						componentsLacking: 
							(map availableComponents 'excludeNil theEntry 
								(if (ls (@ theEntry 'available) (itmGetCount (@ theEntry 'item)))
									(itmSetCount (@ theEntry 'item) 
										(subtract (itmGetCount (@ theEntry 'item)) (@ theEntry 'available))
										) 
									)
								)

						; BUG: maxCountSpace not working correctly
						noCargoSpace:Nil
						; noCargoSpace: (= maxCountSpace 0)
						}
					)
				))
			
			(setq cymekCreateItem (lambda (theRecipe theCount)
				(if (@ theRecipe 'enhancement)
					(itmSetCount 
						(itmSetEnhanced 
							(itmCreate (@ theRecipe 'item) 1)
							{
								enhancement: (@ theRecipe 'enhancement)
								type: &vtTinkerEnhancement;
								}
							)
						(or (@ theRecipe 'itemCount) theCount)
						)
					(itmCreate (@ theRecipe 'item) (or (@ theRecipe 'itemCount) theCount))
					)
				))
				
			(setq cymekFabricate (lambda (theRecipe theCost theCount options)
				(block (
					(compareFlags '(ignoreCharges ignoreData ignoreDisrupted))
					(reminderType (or (@ options 'reminderMission) &msTinkerReminder;))
					(itemToCreate (cymekCreateItem theRecipe theCount))
					itemsConsumed
					)
				
				
					;	Consume items. NOTE: We expect our callers to have already checked
					;	to make sure there are enough items.

					(enum (@ theRecipe 'components) theEntry
						(block (
							(available 
								(rpgCalcComponentsAvailable gPlayerShip 
									(itmCreate (@ theEntry 'item) (* theCount (@ theEntry 'count)))
									)
								)
							)
							
							;	Consume items
							;
							;	NOTE: rpgCalcComponentsAvailable has done all the work to figure
							;	out exactly how many items to consume.

							(enum (@ available 'damagedItems) itemToConsume
								(block ()
									(objRemoveItem gPlayerShip itemToConsume)
									(setq itemsConsumed (append itemsConsumed (list itemToConsume)))
									)
								)

							(enum (@ available 'items) itemToConsume
								(block ()
									(objRemoveItem gPlayerShip itemToConsume)
									(setq itemsConsumed (append itemsConsumed (list itemToConsume)))
									)
								)
							)
						)
						
					;	Charge player
					
					(plyCharge gPlayer (multiply theCost theCount))
					
					;	Create the resulting item
					
					(itmSetKnown itemToCreate True)
					(objAddItem gPlayerShip itemToCreate)
					
					;	Loop over player missions and see if we've accomplished any of them
					
					(enum (msnFind gSource (cat "aS +unid:" reminderType ";")) theMission
						(if (itmIsEqual itemToCreate (cymekCreateItem (msnGetData theMission 'recipe) 1))
							(msnSuccess theMission)
							)
						)
					
					;	Return result
					
					{	itemsCreated: itemToCreate
						itemsConsumed: itemsConsumed
						totalCost: (multiply theCost theCount)
						}
					)
				))
				
			(setq cymekFindRecipe (lambda (recipeList itemType)
				(@ (filter recipeList theRecipe
						(eq (@ theRecipe 'item) itemType)
						)
					0
					)
				))
			)
	</Globals>

	<ShipClass UNID="&scPlayerHornetBase;"
			class=		"(player Hornet base class)"
			attributes=	"commonwealth, playerClass, startingClass"
			inherit=	"&baHumanTechShip;"

			mass=				"5"
			reactorPower=		"50"
			fuelCapacity=		"25000"
			cargoSpace=			"30"
			thrust=				"150"
			maxSpeed=			"45"

			maxArmor=			"5000"
			maxCargoSpace=		"60"
			maxDevices=			"6"
			maxWeapons=			"2"

			leavesWreck=		"0"
	
			>

		<PlayerSettings
			desc=	"This modified Hornet Battle pod was commissioned by the Late and Legendary Anarchist pilot Zephron Janus Babblebrox which they were unable to collect. Zephron's next of kin sold the rights to their life story, which have made somewhat unpopular with those sympathetic with the Anarchists."
			startingCredits=	"2d100+50"

			largeImage=			"&rsHornetLarge;"
			initialClass=		"true"
			>

			<ArmorDisplay>
				<ShipImage imageID="&rsArmorHUDShip_Hornet;" imageWidth="136" imageHeight="136"/>
				<ArmorSection name="main"
						imageID="&rsHornetArmorSingle;" 
						imageX="0" imageY="0" imageWidth="110" imageHeight="110"
						destX="13" destY="13" hpX="55" hpY="14"
						nameY="8" nameBreakWidth="200" nameDestX="0" nameDestY="10" />
			</ArmorDisplay>

			<ShieldDisplay shieldLevelEffect="&efShieldHUDDefault;"> </ShieldDisplay>

			<ReactorDisplay>
				<Image imageID="&rsZubrinReactor;" 
						imageX="0" imageY="0" imageWidth="256" imageHeight="60"/>

				<PowerLevelImage imageID="&rsZubrinReactor;"
						imageX="0" imageY="60" imageWidth="202" imageHeight="14"
						destX="54" destY="9"/>

				<FuelLevelImage imageID="&rsZubrinReactor;"
						imageX="0" imageY="74" imageWidth="194" imageHeight="14"
						destX="54" destY="37"/>

				<FuelLowLevelImage imageID="&rsZubrinReactor;"
						imageX="0" imageY="88" imageWidth="194" imageHeight="14"/>

				<ReactorText x="62" y="22" width="154" height="14"/>
				<PowerLevelText x="62" y="0" width="154" height="9"/>
				<FuelLevelText x="62" y="51" width="154" height="9"/>
			</ReactorDisplay>
		</PlayerSettings>

		<Image imageID="&rsHornetHD;" imageWidth="32" imageHeight="32" rotationCount="120" rotationColumns="12" viewportRatio="0.0029375"/>
		<HeroImage imageID="&rsHornetHero;" imageWidth="320" imageHeight="320"/>

		<Armor>
			<ArmorSection name="main" start="0" span="360" armorID="&itLightSolarArmor;"/>
			<!--<ArmorSection name="main" start="0" span="360" armorID="&itCymekNanoSteelArmor;"/>-->
		</Armor>

		<Items>
		       	<Item count="1" item="&itTargetingComputerROM;"/>
			<Item count="1" item="&itTradingComputerROM;"/>
		       	<Item count="1" item="&itPlayerCargoContainer;"/>
			<Item count="4d3+1" item="&itUraniumOre;"/>

			<!--
				<Item count="15" item="&itSilicarbCrystal;"/>
				<Item count="15" item="&itPlasteelNanos;"/>
				<Item count="15" item="&itLaserAmplifier;"/>
				<Item count="15" item="&itGemOfDespair;"/>
				<Item count="15" item="&itTitaniumOre;"/>
				<Item count="15" item="&itHelium3FuelRod;"/>
				<Item count="1" item="&itAmmoBoxCymekBlast;"/>
				<Item count="1" item="&itBlackMarketID;"/>
		       		<Item count="1" item="&itWeaponSpeedROM;"/>
				<Item count="1" item="&itMiningComputerROM;"/>
				<Item count="1" item="&itEnhanceSRSROM;"/>
			-->
		</Items>

		<Devices>
			<DeviceSlot criteria="w" posAngle="0" posRadius="14"/>
			<Device deviceID="&itCymekOmniMiningLaser;"/>
			<Device deviceID="&itNanoFabricator;"/>
			<Device deviceID="&itCymekMicroDeflector;"/>
			<!-- Test Items
			<Device deviceID="&itPersonalCDMShard;"/>
			<Device deviceID="&itDM1500MissileRack;"/>
			<Device deviceID="&itTranspaceJumpdrive;"/>
			<Device deviceID="&itMinersSmugglingCargoHold;"/>
			<Device deviceID="&itCymekLauncher;"/>
			-->
		</Devices>

		<AISettings
			fireRateAdj=		"30"
			fireAccuracy=		"90"
			perception=			"4"
			/>

		<Maneuver
			maxRotationRate=	"18.0"
			rotationAccel=		"6.0"
			/>

		<Effects>
			<Effect type="thrustMain"		posAngle="180"	posRadius="8"	posZ="0"	rotation="180"/>
		</Effects>
	</ShipClass>

	<ShipClass UNID="&scHornetPlayer;"
			manufacturer=		"Cymek Industries"
			class=				"Cymek Hornet"
			type=				"battlepod"
			score=				"1"

			characterClass=	"&unidPilgrimClass;"
			attributes=			"commonwealth, playerClass, startingClass, 00200000_PlayerShip"
			
			inherit=			"&scPlayerHornetBase;"
			>
	</ShipClass>

	<ShipClass UNID="&scHornetPlayerCDM;"
			manufacturer=		"Cymek Industries"
			class=				"Cymek Hornet"
			type=				"battlepod"
			score=				"1"

			characterClass=	"&unidCDMMercenaryClass;"
			attributes=			"commonwealth, playerClass, startingClass, 00900000_PlayerShip"
			
			inherit=			"&scPlayerHornetBase;"
			>
	</ShipClass>

	<ItemType UNID="&itCymekMicroDeflector;"
			name=				"cymek micro deflector"
			level=				"2"
			value=				"500"
			mass=				"50"
			frequency=			"uncommon"
			modifiers=			"MajorItem"
			showReference=		"true"

			description=		"This ultra lightweight micro deflector can be installed by hand if needed. It requires no device slots, a Cymek speciality."

			>

		<Image imageID="&rsItems1;" imageX="192" imageY="0" imageWidth="96" imageHeight="96"/>

		<Shields
				hitPoints=		"20"
				hpBonus=		"0"
				regen=		        "12"
				depletionDelay=	        "288"
				powerUse=		"3"
                                deviceSlots="0"
				/>
                
        	<Invoke>
			(intAutoInstall gSource gItem)
		</Invoke>

	</ItemType>

	<ItemType UNID="&itCymekOmniMiningLaser;"
			name=				"cymek omni mining laser"
			level=				"6"
			value=				"2500"
			mass=				"250"
			frequency=			"notrandom"
			modifiers=			"EnergyWeapon; MajorItem; Specialty;"
			showReference=		"true"

			description=		"Cymek Industries have spent considerable effort in optimizing obsolete laser weaponry for motives unknown. This omni mining laser is one such artifact of this shadowy organization."
			>

		<Image imageID="&rsItems1;" imageX="96" imageY="0" imageWidth="96" imageHeight="96"/>

		<Weapon
				type=				"beam"
				damage=				"laser:1d4+1; mining:5;"
				fireRate=			"15"
				lifetime=			"50"
				powerUse=			"20"
			        omnidirectional=		"true" 
                                deviceSlots=			"0"
				fireEffect=			"&efGreenLaserFireEffect;"
				hitEffect=			"&efGreenLaserHitEffect;"
				sound=				"&snLaserCannon;"
				>
			<Effect>
				<Beam
						beamType=			"laser"
						primaryColor=		"0x5f, 0xf1, 0x2a"
						secondaryColor=		"0x00, 0xff, 0x00"
						/>
			</Effect>			
		</Weapon>

        	<Invoke>
			(intAutoInstall gSource gItem)
		</Invoke>
	</ItemType>

	<ItemType UNID="&itCymekLaser;"
			name=				"cymek laser"
			level=				"6"
			value=				"400"
			mass=				"200"
			frequency=			"notrandom"
			modifiers=			"EnergyWeapon; MajorItem; Specialty;"
			showReference=		"true"
			description=		"This high-tech lightweight and low power laser was made by Cymek Industries for drones and scout ships."
			>

		<Image imageID="&rsItems1;" imageX="96" imageY="0" imageWidth="96" imageHeight="96"/>

		<Weapon
				type=				"beam"
				damage=				"laser:1d4+1"
				fireRate=			"20"
				lifetime=			"50"
				powerUse=			"5"
			        omnidirectional=		"false" 
                                deviceSlots=			"0"
				fireEffect=			"&efGreenLaserFireEffect;"
				hitEffect=			"&efGreenLaserHitEffect;"
				sound=				"&snLaserCannon;"
				>
			<Effect>
				<Beam
						beamType=			"laser"
						primaryColor=		"0x5f, 0xf1, 0x2a"
						secondaryColor=		"0x00, 0xff, 0x00"
						/>
			</Effect>			
		</Weapon>

        	<Invoke>
			(intAutoInstall gSource gItem)
		</Invoke>
	</ItemType>

	<ItemType UNID="&itCymekNaniteProjector;"
			name=				"Cymek Nanite Projector Matrix"
			level=				"6"
			value=				"2650"
			mass=				"250"
			frequency=			"notrandom"
			modifiers=			"EnergyWeapon; MajorItem; Specialty;"
			showReference=		"true"

			description=		"This Cymek Industries device projects charged offensive nanites from a regenerating feedstock to perform mining functions. The nanite reservoir can be refilled by feeding these tiny robots any old junk."
			>

		<Image imageID="&rsItems1;" imageX="96" imageY="0" imageWidth="96" imageHeight="96"/>

		<Weapon
				type=				"beam"
				minFireArc=			"345"
				maxFireArc=			"15"
				damage=				"nano:1d4+1; mining:6;"
				fireRate=			"20"
				lifetime=			"70"
			        powerUse=			"20"
			        omnidirectional = "true" 
                                deviceSlots="0"

				beamType=			"lightning"
				primaryColor=		"0xc4, 0x2a, 0xf1"
				secondaryColor=		"0xc0, 0x00, 0xff"
                                intensity=			"1"
				directional=		"true"
                                sound=				"&snLaserCannon;"
				>
		</Weapon>
        
        	<Invoke>
			(intAutoInstall gSource gItem)
		</Invoke>
	</ItemType>

	<ItemType UNID="&itCymekNanoTitaniumArmor;"
			name=				"segment of nano-titanium"
			level=				"3"
			value=				"400"
			mass=				"1000"
			frequency=			"notrandom"
			numberAppearing=	"4"
			modifiers=			"MinorItem; Specialty;"

			description=		"This is a segment of self-repairing nano-fabricated armor titanium armor, it is stronger and lighter than regular titanium armor thanks to nanoscale manufacturing process."

			>

		<Image imageID="&rsItems4;" imageX="192" imageY="0" imageWidth="96" imageHeight="96"/>

		<Armor
				hitPoints=	"60"
				hpBonus=	"+0"
				composition=    "nanoscale"
				regen="1"
				radiationImmune=        "false"
				blindingImmune=			"false"
				deviceDamageImmune=		"false"
				disintegrationImmune=	"false"
				shatterImmune=			"false"
				/>
    	</ItemType>

	<ItemType UNID="&itCymekNanoSteelArmor;"
			name=				"segment of Cymek nanite infused ultra steel"
			level=				"7"
			value=				"3500"
			mass=				"1000"
			frequency=			"rare"
			numberAppearing=	"4"
			modifiers=			"MinorItem; Specialty;"

			description=		"Made for next generation Cymek scout ships this nano-forged and nanite infused composite allows ships self-sufficiency on long missions. Despite its name, it contains only trace amounts of Iron."

			>

		<Image imageID="&rsItems4;" imageX="192" imageY="0" imageWidth="96" imageHeight="96"/>

		<Armor
				hitPoints=	"150"
				hpBonus=	"+0"
				repairTech=	"8"
				composition=            "nanoscale"
				regen="1"
                                photoRecharge=          "30"

				radiationImmune=        "true"
				blindingImmune=			"false"
				deviceDamageImmune=		"false"
				disintegrationImmune=	"false"
				shatterImmune=			"false"
				/>
    	</ItemType>
        
	<ItemType UNID="&itEmergencySupplies;"
			name=				"[crate(s) of ]emergency supplies"
			level=				"2"
			value=				"250"
			mass=				"500"
			frequency=			"uncommon"
			numberAppearing=	"1d8"
			attributes=			"Consumable; consumerGood, humanTech, Meds, Food"

			description=		"Water, rations, medicine, radio flares, tools, even a disposable space suit, This container  has everything a budding cosmonaut needs to survive in the vacuum of space for up to 72 hours. "

			sortName=			"medical supplies, crate of"
			>

		<Image imageID="&rsItems1;" imageX="192" imageY="480" imageWidth="96" imageHeight="96"/>
	</ItemType>

	<ItemType UNID="&itNanoFabricator;"
			name=				"Cymek Nano Fabricator"
			attributes=			"humanTech, majorItem"
			  
			level=				"7"
			frequency=			"rare"
			unknownType=		"&itUnknownAlienDevice;"

			value=				"3500"
			mass=				"1000"
                        deviceSlots="0"
			  
			description=		"For such an advanced device it looks more like a barrel full of gray goop. This is a nano-fabricator, bordering on illegality, it is capable of producing many goods from raw materials."
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="192" imageWidth="96" imageHeight="96"/>

		<!-- Device slots zero, because it is just a barrel of goop that is powered from its inputs -->
		<MiscellaneousDevice 
			powerUse=			"1"
                        deviceSlots="0"
		/>
		<!--<MiscellaneousDevice
				powerUse=		"1"
				capacitorPowerUse=	"4"
				powerToActivate=	"2000"
                                deviceSlots="0"
		/>-->



		<Invoke key="F" installedOnly="false">
			(block Nil
				(scrShowScreen gScreen &dsNanoFabricator;)

				; Item identified
				(itmSetKnown gItem)
				)
		</Invoke>

	</ItemType>

	<DockScreen UNID="&dsNanoFabricator;"
			type=           "customItemPicker"
			inherit=		"&dsDockScreenBase;"
			nestedScreen=   "true"
			>
		<Display type="customItemPicker"
				displayActual="true"
				>
			(block (
				(criteria (or (@ gData 'criteria) "* +hasComponents:true;"))
				)
				(append
					;	Items with component definitions
					(map (itmGetTypes criteria) 'excludeNil theType
						(itmCreate theType 1)
						)

					;	Global Nano Fab recipes
					(map (typGetData &dsNanoFabricator; 'NanoRecipes) 'excludeNil theRecipe
						(itmSetData (cymekCreateItem theRecipe 1) 'recipe theRecipe)
						)
					)
				)
		</Display>
		
		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(theItem (scrGetItem gScreen))
						(theRecipe (itmGetData theItem 'recipe))
						(fabInfo (if theRecipe
							(cymekCalcFabrication theRecipe)
							(rpgCalcCreateFromComponents theItem gPlayerShip gSource)
							))
						;(workCost (@ fabInfo 'workCost))
						(workCost 0)
						(currencyUsed (@ fabInfo 'currencyUsed))
						(maxCount (@ fabInfo 'maxCount))

						;	Data for error conditions
						(itemNeeded (or (@ (@ fabInfo 'componentsMissing) 0) (@ (@ fabInfo 'componentsLacking) 0)))
						(errorDesc {
							item: itemNeeded
							itemCount: (itmGetCount itemNeeded)
							itemName: (itmGetName itemNeeded 'actual)
							itemNames: (itmGetName itemNeeded '(actual plural))
							itemNamesShort: (itmGetName itemNeeded '(actual plural short))
							})
						desc
						)

						;	Set the description of the selected item
						
						(switch
							(not theItem)
								(scrSetDescTranslate gScreen 'descFabricateNoItems)
							
							(not (@ fabInfo 'componentsNeededDesc))
								(scrSetDescTranslate gScreen 'descFabricateItemNoComponents {
									itemName: (itmGetName theItem '(actual count))
									cost: (fmtCurrency currencyUsed workCost)
									})

							(scrSetDescTranslate gScreen 'descFabricateItem {
								itemName: (itmGetName theItem '(actual count))
								cost: (fmtCurrency currencyUsed workCost)
								})
							)

						;	Set the list of components

						(scrSetControlValue gScreen 'componentsNeeded (@ fabInfo 'itemListDisplay))

						;	Generate an error descriptor, if we can't fabricate even a single item

						(switch
							(not theItem)
								Nil

							(@ fabInfo 'componentsMissing)
								(scrSetControlValue gScreen 'descError
									(scrTranslate gScreen 'errorComponentMissing errorDesc)
									)

							(and (@ fabInfo 'componentsLacking) (= (@ errorDesc 'itemCount) 1))
								(scrSetControlValue gScreen 'descError
									(scrTranslate gScreen 'errorComponentLacking errorDesc)
									)

							(@ fabInfo 'componentsLacking)
								(scrSetControlValue gScreen 'descError
									(scrTranslate gScreen 'errorComponentsLacking errorDesc)
									)

							(leq (plyGetCredits gPlayer) (@ fabInfo 'workCost))
								(scrSetControlValue gScreen 'descError
									(scrTranslate gScreen 'errorMoneyLacking)
									)

							(@ fabInfo 'noCargoSpace)
								(scrSetControlValue gScreen 'descError
									(scrTranslate gScreen 'errorCargoSpace)
									)
							)

						;	Remember the recipe, the components, and the cost for later
						(scrSetData gScreen 'fabInfo fabInfo)

						;	Disable Fabricate action if we can't do it
						
						(scrEnableAction gScreen 'actionFabricate (gr maxCount 0))
						; (scrEnableAction gScreen 'actionReminder theItem)
						)
				</OnPaneInit>

				<Controls>
					<Text id="desc"/>
					<ItemListDisplay id="componentsNeeded"	showActualItem="true"/>
					<Text id="descError"/>
				</Controls>

				<Actions>
					<Action id="actionFabricate" default="1">
						(block (
							(fabInfo (scrGetData gScreen 'fabInfo))
							)

							(if (gr (@ fabInfo 'maxCount) 1)
								(scrShowPane gScreen "FabricateCount")

								(block Nil
									(scrSetData gScreen 'result
										(rpgCreateFromComponents fabInfo gPlayerShip gSource 1 {
											reminderCriteria: "aS +unid:&msTinkerReminder;;"
											})
										)
									(scrShowPane gScreen "FabricateResult")
									)
								)
							)
					</Action>
					<Action id="actionDone" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
			
			<FabricateCount
					showCounter=	"true"
					>
				<OnPaneInit>
					(block (
						(fabInfo (scrGetData gScreen 'fabInfo))
						)
						(scrSetDescTranslate gScreen 'descFabricateCount)
						(scrSetCounter gScreen (@ fabInfo 'maxCount))
						)
				</OnPaneInit>
			
				<Actions>
					<Action id="actionFabricate" default="1">
						(block (
							(fabInfo (scrGetData gScreen 'fabInfo))
							(count (scrGetCounter gScreen))
							)
							(switch
								(gr count (@ fabInfo 'maxCount))
									(scrSetCounter gScreen (@ fabInfo 'maxCount))

								(leq count 0)
									(scrShowPane gScreen "Default")

								(block Nil
									(scrSetData gScreen 'result
										(rpgCreateFromComponents fabInfo gPlayerShip gSource count {
											reminderCriteria: "aS +unid:&msTinkerReminder;;"
											})
										)
									(scrShowPane gScreen "FabricateResult")
									)
								)
							)
					</Action>
					
					<Action id="actionCancel" cancel="1">
						(scrShowPane gScreen "Default")
					</Action>
				</Actions>
			</FabricateCount>
				
			<FabricateResult
					noListNavigation="true"
					>
				<OnPaneInit>
					(block (
						(theResult (scrGetData gScreen 'result))
						)
						(scrSetDescTranslate gScreen 'descFabricateResult {
							itemCreated: (itmGetName (@ theResult 'itemsCreated) 0x08)
							itemsConsumed: (or (strItemList (@ theResult 'itemsConsumed) 0x08) "None")
							totalCost: (fmtCurrency (@ theResult 'currencyUsed) (@ theResult 'totalCost))
							})
						)
				</OnPaneInit>
			
				<Actions>
					<Action id="actionDone" default="1" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</FabricateResult>
		</Panes>

		<!-- 
			`itCymekNanoFeedstock` is used as a generic "cost", we need to balance these
			costs with the item we are producing. The items we produce are also cheaper
			than their utility would suggest so we do not have to use hundreds of tons of
			ore or items, instead relying on the fact that it takes time and effort to mine
			ore, or to find certain ores. The items are cheaper so it is more difficult to
			profit off of them. You should also bear in mind the weight of an item.

			The cost of ore and fuel rods is,

			itHelium3FuelRod    -   25, itHeliumAssembly - 150, itXenotiteFuelRod - 375
			itPteracniumFuelRod -   1125, itHadronVacuumFuelCell - 5250

			itCopperOre         -  52,    uncommon
			itTitaniumOre       -  35,    common
			itVanadiumOre       -  90,    rare
			itHeliumRegolith    -  200,   rare
			itPlasteelOre       -  80,    common
			itUraniumOre        -  120,   uncommon
			itCobaltThoriumOre  -  280,   uncommon
			itNiobiumOre        -  185,   common
			itPalladiumOre      -  460,   rare
			itCeralloyOre       -  400,   common
			itGoldOre           -  600,   uncommon
			itXenotiteOre       -  1000,  rare
			itCeriumOre         -  850,   common
			itDuralloyOre       -  2100,  rare
			itPlatinumOre       -  1250,  uncommon
			itPteracniumOre     -  850,   common
			itHexaniumOre       -  2700,  uncommon
			itMolybdenumOre     -  4500,  rare
			itOrthoSteelOre     -  1800,  common
			...


			It would be great if we could produce multiple items, this would mean we could
			dispense with the ammo boxes and create ammo directly.

		-->
		<GlobalData>
			<NanoRecipes>
				(
				{ item:&itCymekNanoFeedstock;      enhancement:Nil    components:( { item:&itTitaniumOre; count:3 }  { item:&itHelium3FuelRod; count:1 } )  totalCost:0 }
				{ item:&itCymekNanoFeedstock;      enhancement:Nil    components:( { item:&itCopperOre; count:2 }  { item:&itHelium3FuelRod; count:1 } )  totalCost:0 }
				{ item:&itCymekNanoFeedstock;      enhancement:Nil    components:( { item:&itVanadiumOre; count:1 }  { item:&itHelium3FuelRod; count:1 } )  totalCost:0 }
				{ item:&itCymekNanoFeedstock;      enhancement:Nil    components:( { item:&itPlasteelOre; count:1 }  { item:&itHelium3FuelRod; count:1 } )  totalCost:0 }
				{ item:&itCymekNanoFeedstock;      enhancement:Nil    components:( { item:&itUraniumOre; count:1 }  )  totalCost:0 }
				{ item:&itCymekNanoFeedstock;      enhancement:Nil    components:( { item:&itHydrocarbons; count:3 }  )  totalCost:0 }

				{ item:&itCymekMicroDeflector;     enhancement:Nil    components:( { item:&itCymekNanoFeedstock; count:5 } )  totalCost:0 }
				{ item:&itCymekSentinel;           enhancement:Nil    components:( { item:&itCymekNanoFeedstock; count:3 } )  totalCost:0 }
				{ item:&itPlayerCargoContainer;    enhancement:Nil    components:( { item:&itCymekNanoFeedstock; count:5 } )  totalCost:0 }
				{ item:&itEmergencySupplies;       enhancement:Nil    components:( { item:&itCymekNanoFeedstock; count:3 } )  totalCost:0 }
				{ item:&itHeliumAssembly;          enhancement:Nil    components:( { item:&itHelium3FuelRod; count:6 } )  totalCost:0 }
				{ item:&itUraniumRods;             enhancement:Nil    components:( { item:&itUraniumOre; count:1 } )  totalCost:0 }
				{ item:&itUraniumRods;             enhancement:Nil    components:( { item:&itRadioactiveWaste; count:3 } )  totalCost:0 }
				{ item:&itCymekNaniteProjector;    enhancement:Nil    components:( { item:&itNiobiumOre; count:2 } { item:&itCymekNanoFeedstock; count: 8 } )  totalCost:0 }
				{ item:&itCymekNanoSteelArmor;     enhancement:Nil    components:( { item:&itCeralloyOre; count:1 } { item:&itDuralloyOre; count: 4 } )  totalCost:0 }
				{ item:&itRegeneratingNanos;       enhancement:Nil    components:( { item:&itRepairingNanos; count: 2 } )  totalCost:0 }
				{ item:&itRepairingNanos;          enhancement:Nil    components:( { item:&itCymekNanoFeedstock; count: 4 } )  totalCost:0 }
				{ item:&itPersonalCDMShard;        enhancement:Nil    components:( { item:&itCymekNanoFeedstock; count:1 } { item:&itOpticalKnowledgeArray; count: 2 } { item:&itNeuralProcessor; count: 2 } )  totalCost:0 }
				{ item:&itNanoFabricator;          enhancement:Nil    components:( { item:&itRegeneratingNanos; count: 3 } { item:&itNeuralProcessor; count: 1 } { item:&itOrthosteelOre; count: 2 } )  totalCost:0 }
				{ item:&itReinforcedTitanium1;     enhancement:Nil    components:( { item:&itTitaniumOre; count: 5 }  { item:&itHelium3FuelRod; count: 1 } )  totalCost:0 }

				{ item:&itSuperconductingShields;  enhancement:Nil    components:( { item:&itSuperconductingCoil; count:4 } { item:&itCymekNanoFeedstock; count:4 } )  totalCost:0 }
				{ item:&itSuperconductingCoil;     enhancement:Nil    components:( { item:&itCymekNanoFeedstock; count:1 } { item:&itNiobiumOre; count:1 } )  totalCost:0 }

				{ item:&itAmmoBoxSapiens;          enhancement:Nil    components:( { item:&itCymekNanoFeedstock; count:1 } { item:&itRadioactiveWaste; count:1 } )  totalCost:0 }
				{ item:&itBarrelBomb;              enhancement:Nil    components:( { item:&itHydrocarbons; count:1 } { item:&itTitaniumOre; count:1 } )  totalCost:0 }

				{ item:&itCymekLauncher;           enhancement:Nil    components:( { item:&itCymekNanoFeedstock; count:11 } )  totalCost:0 }
				{ item:&itAmmoBoxCymekTitanium;    enhancement:Nil    components:( { item:&itTitaniumOre; count:2 } { item:&itCymekNanoFeedstock; count:1 } )  totalCost:0 }
				{ item:&itAmmoBoxCymekUranium;     enhancement:Nil    components:( { item:&itUraniumOre; count:2 } { item:&itCymekNanoFeedstock; count:1 } )  totalCost:0 }
				{ item:&itAmmoBoxCymekBlast;       enhancement:Nil    components:( { item:&itHydrocarbons; count:2 } { item:&itCymekNanoFeedstock; count:1 } )  totalCost:0 }
				{ item:&itAmmoBoxCymekIon;         enhancement:Nil    components:( { item:&itXenotiteOre; count:2 } )  totalCost:0 }
				{ item:&itAmmoBoxCymekParticle;    enhancement:Nil    components:( { item:&itXenotiteOre; count:3 } )  totalCost:0 }
				{ item:&itAmmoBoxCymekAntiMatter;  enhancement:Nil    components:( { item:&itPteracniumOre; count:4 } { item:&itXenotiteOre; count:3 } )  totalCost:0 }
				)
			</NanoRecipes>
		</GlobalData>
		
		<Language>
			<Text id="actionFabricate">[F]abricate</Text>
			<!--<Text id="actionReminder">[R]emember for Later</Text>-->

			<Text id="descFabricateNoItems">
				Unfortunately, you do not have any required components.
			</Text>
			<Text id="descFabricateItem">
				To fabricate %itemName% the following components are needed:
			</Text>
			<Text id="descFabricateItemNoComponents">
				To fabricate %itemName% we charge %cost%.
			</Text>
			<Text id="descFabricateReminderAdded">
				A reminder has been added to your mission computer. Once you obtain
				the necessary items you may return here to fabricate %itemName%.
			</Text>
			<Text id="descFabricateCount">
				How many items do you wish to fabricate?
			</Text>
			<Text id="descFabricateResult">
				After aggressive squelching and burbling the nano-soup retreats back
				into the barrel from whence it came:

				Fabricated: %itemCreated%.\n
				Consumed: %itemsConsumed%.\n
			</Text>

			<Text id="errorComponentLacking">
				Unfortunately, you need one more %itemName%.
			</Text>
			<Text id="errorComponentsLacking">
				Unfortunately, you need %itemCount% more %itemNames%.
			</Text>
			<Text id="errorComponentMissing">
				Unfortunately, you do not have any %itemNamesShort%.
			</Text>
			<Text id="errorMoneyLacking">
				Unfortunately, you do not have enough credits.
			</Text>
			<Text id="errorCargoSpace">
				Unfortunately, you do not have enough cargo space.
			</Text>
		</Language>
	</DockScreen>

	<!-- We could have a device screen so we can talk to the shard, or improve it. -->
	<ItemType UNID="&itPersonalCDMShard;"
			name=				"Personal CDM Shard"
			level=				"7"
			value=				"2000"
			mass=				"50"
			frequency=			"notrandom"
			attributes=			"MajorItem, communion, humanTech, info, soul, notForSale, QuantumCPU"

			description=		"This Quantum CDM shard contains a homomorphically encrypted copy of your mind running in a virtual paradise with its own power supply. It may be willing to help you."
                        deviceSlots="0"
		>
		<MiscellaneousDevice
				powerUse=		"1"
				capacitorPowerUse=	"4"
				powerToActivate=	"20000"
                                deviceSlots="0"
				/>

		<Invoke key="S" installedOnly="true">
			; Paralyze enemy ships in the area
			(block (targets)
				(setq targets (sysFindObject gSource "sEN:16;"))
				(enum targets target
					(objProgramDamage target gSource "CDM Scramble" 6
						(objMakeParalyzed target (random 600 1200))
						)
					)
				(if targets
					(objSendMessage gSource Nil "CDM Scramble: Targets disabled")
					(objSendMessage gSource Nil "CDM Scramble: No targets in range")
					)

				(itmSetKnown gItem))
		</Invoke>

		<Properties>
			<Definition id="sisters.donateRel">270</Definition>
		</Properties>

		<Image imageID="&rsItems1;" imageX="192" imageY="288" imageWidth="96" imageHeight="96"/>

		<!--<Invoke>
			(intAutoInstall gSource gItem)
		</Invoke>-->
		
		<Language>
			<Text id="sisters.donateDesc">
				
				You hear a voice in your head but can't understand the words. 
				You feel joy and sadness, triumph and failure, surprise and
				regret.

				Eventually, all those feelings fade and you're left with the
				presence of Domina and a profound sense of loss.
				
			</Text>
		</Language>
	</ItemType>

	<ItemType UNID="&itPlayerCargoContainer;"
			name=				"deployable container habitat"
			level=				"2"
			value=				"300"
			mass=				"2000"
			frequency=			"common"
			modifiers=			"commonwealth, humanTech"
			description=                    "A deployable container habitat and storage solution."
			>
                        
		<Image imageID="&rsItems1;" imageX="288" imageY="0" imageWidth="96" imageHeight="96"/>

		<Invoke key="H">
			(block (newStation)
			      (setq gDest (sysCreateStation &stPlayerCargoContainer; (sysVectorPolarOffset gPlayerShip 0 0)))
			      ; Welcome message
			      (objSendMessage gSource Nil "Habitat Deployed.")

			      ; Remove the item from the player's list
			      (objRemoveItem gSource gItem 1)
			)
		</Invoke>
	</ItemType>

	<!-- Player Cargo Container -->

	<!-- TODO: Fix cargo space, add option to collapse habitat container back if it is empty. -->
	<!-- It would be nice if we could take the container with if it is empty -->
	<!--
		Adding the following makes the station no longer immortal, however it no longer
		functions as well...

			armorID=			"&itPlasteelPlate;"
			hitPoints=			"100"
			multiHull=			"false"
			regen=				"8"

	-->
	<StationType UNID="&stPlayerCargoContainer;"
			name=				"player habitat"
			sovereign=			"&svPlayer;"
			inherit=			"&unidCommonText;"
		
			attributes=			"envAir, generic, friendly, majorStation, noSalvage"

			dockScreen=	"Main"
			abandonedScreen=	"Dead"

			armorID=			"&itPlasteelPlate;"
			hitPoints=			"100"
			multiHull=			"false"
			regen=				"8"
			structuralHitPoints="1"

			scale=				"ship"
			size=				"20"
			mass=				"50"
			cargoSpace=			"100" 
			mobile=				"true"
			noMapIcon=			"false"
			ejectaType=			"&vtWreckEjecta;"
			regen=				"1"
			noSalvage=			"true"
		>

		<Properties>
			<Definition id="autonItemType">&itPlayerCargoContainer;</Definition>
		</Properties>

		<InitialData>
			<!-- We don't want salvagers to take this loot. Hopefully these magical
			incantation wards them against doing so. -->
			<Data id="core.noSalvage">True</Data>
			<Data id="autonItemType">&itPlayerCargoContainer;</Data>
			<Data id="cargoSpace">100</Data>
		</InitialData>

		<ImageVariants>
			<Image	imageID="&rsCommonwealthSlumsImage;" imageX="0" imageY="128" imageWidth="64" imageHeight="64"/>
			<Image	imageID="&rsCommonwealthSlumsImage;" imageX="64" imageY="128" imageWidth="64" imageHeight="64"/>
			<Image	imageID="&rsCommonwealthSlumsImage;" imageX="128" imageY="128" imageWidth="64" imageHeight="64"/>
			<Image	imageID="&rsCommonwealthSlumsImage;" imageX="192" imageY="128" imageWidth="64" imageHeight="64"/>
		</ImageVariants>

		<DockingPorts>
			<Port x="0"		y="70" />
			<Port x="61"	y="35" />
			<Port x="61"	y="-35" />
			<Port x="0"		y="-70" />
			<Port x="-61"	y="-35" />
			<Port x="-61"	y="35" />
		</DockingPorts>

		<Language>
			<Text id="actionUndock">[U]ndock</Text>
			<Text id="actionUndeploy">[X] Retrieve this container</Text>
			<Text id="actionJettison">[S]tore Items</Text>
			<Text id="actionLoot">[R]etrieve Items</Text>
			<Text id="actionNameContainer">[N]ame Habitat</Text>
			<Text id="actionRetrieveThisItem">[R]etrieve this Item</Text>
			<Text id="actionRetrieve">[R]etrieve</Text>
			<Text id="actionStoreThisItem">[S]tore this Item</Text>
			<Text id="actionStore">[S]tore</Text>
			<Text id="core.noItemsHereDesc">There are no items here.</Text>

			<!-- The `%capacity%` variable is not being calculated correctly, presumably because
				the right object is not getting the `cargoSpace` property set.

				When it is fixed, add in the string:
				
				"Capacity Left: %capacity%"

				Otherwise the container has unlimited storage capacity.

				Changing the text of the description for each habitat would be good;
				Beware of the leopard, roommates, etcetera.
			-->
			<Text id="descDefault">

				These cheap and popular 20 Ft modular shipping containers can be deployed 
				into a personal habitat or a storage solution depending on the users needs.  

				Along with a shower, toilet, bed, oxygen recycler, radio, and solar panels. 
				The major feature according to the digi-brochure is a Soylent combined waste and 
				food processor which comes with the tag line 'Tasty and Hygienic!'.

				This one is yours, you need to tidy up and you forgot to turn the Holo TV off
				when you last left.

			</Text>
			<Text id="rpg.jettisonQuantity">How many items do you wish to store?</Text>
			<Text id="rpg.lootQuantity">How many items do you wish to retrieve?</Text>
			<Text id="rpg.noSpaceToJettison">There is not enough space here to store %itemName%.</Text>
			<Text id="rpg.onlySomeSpaceToJettison">There is only enough space here to store %itemName%.</Text>
			<Text id="deadStation">The corpse of your former abode saddens you. All of your belongings are no more.</Text>
		</Language>
		
		<!-- Docking -->
		
		<DockScreens>
			<Main>
				<Panes>
					<Default descID="descDefault">
						<OnPaneInit>
							(block ()
								(scrSetDescTranslate gScreen 'descDefault {
									name: (objGetName gSource 0)
									capacity: (fmtNumber 'massKg (objGetCargoSpaceLeft gSource))
									})

								(rpgSetLootAction gSource)
								)
						</OnPaneInit>

						<Actions>
							<Action id="actionLoot" default="1">
								(scrShowScreen gScreen &dsRPGLoot; {
									lootLabel: (objTranslate gSource 'actionRetrieveThisItem)
									lootConfirmLabel: (objTranslate gSource 'actionRetrieve)
									})
							</Action>

							<Action id="actionJettison">
								(scrShowScreen gScreen &dsRPGJettison; {
									jettisonLabel: (objTranslate gSource 'actionStoreThisItem)
									jettisonConfirmLabel: (objTranslate gSource 'actionStore)
									})
							</Action>

							<Action id="actionNameContainer">
								(scrShowScreen gScreen &dsNameHabitat; { autonObject:gSource } )
							</Action>

							<Action id="actionUndock" cancel="1" default="1">
								<Exit/>
							</Action>

							<!--<Action id="actionUndeploy"> </Action>-->
						</Actions>
					</Default>
				</Panes>
			</Main>
			<Dead>
				<Panes>
					<Default descID="deadStation">
						<Actions>
							<Action id="actionUndock" cancel="1" default="1">
								<Exit/>
							</Action>
						</Actions>
					</Default>
				</Panes>
			</Dead>
		</DockScreens>
	</StationType>

	<ItemType UNID="&itAmmoBoxKM100;"
			name=				"KM100 ammunition box(es)"
			level=				"2"
			value=				"200"
			mass=				"1000"
			frequency=			"notrandom"
			unknownType=		"&vtUnknownAmmoBox;"
			attributes=			"ammoBox, commonwealth, consumable"

			description=		"This box contains KM100 missiles."
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="384" imageWidth="96" imageHeight="96"/>

		<Invoke>
			(intAmmoBoxOpen (itmCreate &itKM100Missile; 50))
		</Invoke>

	</ItemType>

	<ItemType UNID="&itAmmoBoxSapiens;"
			name=				"Sapiens Radiation Mine ammunition box(es)"
			level=				"2"
			value=				"150"
			mass=				"500"
			frequency=			"notrandom"
			unknownType=		"&vtUnknownAmmoBox;"
			attributes=			"ammoBox, commonwealth, consumable, illegal"

			description=		"This box contains Sapiens Radiation Mines."
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="384" imageWidth="96" imageHeight="96"/>

		<Invoke>
			(intAmmoBoxOpen (itmCreate &itSapiensRadiationMine; 20))
		</Invoke>

	</ItemType>

	<ItemType UNID="&itAmmoBoxCymekTitanium;"
			name=				"Cymek Titanium Slug ammunition box(es)"
			level=				"2"
			value=				"200"
			mass=				"1000"
			frequency=			"notrandom"
			unknownType=		"&vtUnknownAmmoBox;"
			attributes=			"ammoBox, commonwealth, consumable"

			description=		"This box contains titanium slugs."
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="384" imageWidth="96" imageHeight="96"/>

		<Invoke>
			(intAmmoBoxOpen (itmCreate &itCymekTitaniumSlug; 400))
		</Invoke>
	</ItemType>

	<ItemType UNID="&itAmmoBoxCymekUranium;"
			name=				"Cymek Uranium Slug ammunition box(es)"
			level=				"2"
			value=				"200"
			mass=				"1000"
			frequency=			"notrandom"
			unknownType=		"&vtUnknownAmmoBox;"
			attributes=			"ammoBox, commonwealth, consumable, illegal"

			description=		"This box contains depleted uranium slugs. Do not bounce."
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="384" imageWidth="96" imageHeight="96"/>

		<Invoke>
			(intAmmoBoxOpen (itmCreate &itCymekUraniumSlug; 300))
		</Invoke>
	</ItemType>

	<ItemType UNID="&itAmmoBoxCymekBlast;"
			name=				"Cymek Blast Slug ammunition box(es)"
			level=				"4"
			value=				"400"
			mass=				"1000"
			frequency=			"notrandom"
			unknownType=		"&vtUnknownAmmoBox;"
			attributes=			"ammoBox, commonwealth, consumable"

			description=		"This box contains blast slugs."
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="384" imageWidth="96" imageHeight="96"/>

		<Invoke>
			(intAmmoBoxOpen (itmCreate &itCymekBlastSlug; 200))
		</Invoke>
	</ItemType>
	<ItemType UNID="&itAmmoBoxCymekIon;"
			name=				"Cymek EMP Slugs ammunition box(es)"
			level=				"5"
			value=				"750"
			mass=				"1200"
			frequency=			"notrandom"
			unknownType=		"&vtUnknownAmmoBox;"
			attributes=			"ammoBox, commonwealth, consumable, military"

			description=		"This box contains miniaturized Xenotite pumped-charge EMP detonators."
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="384" imageWidth="96" imageHeight="96"/>

		<Invoke>
			(intAmmoBoxOpen (itmCreate &itCymekIonSlug; 200))
		</Invoke>
	</ItemType>

	<ItemType UNID="&itAmmoBoxCymekParticle;"
			name=				"Cymek Particle Slugs ammunition box(es)"
			level=				"4"
			value=				"500"
			mass=				"1400"
			frequency=			"notrandom"
			unknownType=		"&vtUnknownAmmoBox;"
			attributes=			"ammoBox, commonwealth, consumable"

			description=		"This box contains an explosive device that can produce lethal particles when focused correctly."
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="384" imageWidth="96" imageHeight="96"/>

		<Invoke>
			(intAmmoBoxOpen (itmCreate &itCymekParticleSlug; 200))
		</Invoke>
	</ItemType>

	<ItemType UNID="&itAmmoBoxCymekAntiMatter;"
			name=				"Cymek Anti Matter Slug ammunition box(es)"
			level=				"6"
			value=				"1500"
			mass=				"1500"
			frequency=			"notrandom"
			unknownType=		"&vtUnknownAmmoBox;"
			attributes=			"ammoBox, commonwealth, consumable, military"

			description=		"This box contains anti-matter inducers compatible with the Cymek launcher."
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="384" imageWidth="96" imageHeight="96"/>

		<Invoke>
			(intAmmoBoxOpen (itmCreate &itCymekAntiMatterSlug; 200))
		</Invoke>
	</ItemType>
<!-- barrel bomb  -->

	<ItemType UNID="&vtBarrelBombFire;"
			name=				"thrown barrel bomb"
			virtual=			"true"
			level=				"2"
			>

		<Weapon
				type=			"missile"
				lifetime=		"250"
				damage=			"blast:8d6; momentum1; WMD4"
				missileSpeed=	"3"
				hitPoints=		"20"
				canhitsource=	"false"
				powerUse=			"10"
				hitEffect=		"&efFragmentationExplosion;"

				failsafe=		"10"
			>


			<Effect>
				<Image imageID="&rsBarrelBomb;" imageX="0" imageY="0" imageWidth="24" imageHeight="24" imageFrameCount="12" imageTicksPerFrame="10"/>
			</Effect>

			<Fragment 
				count=			"1"
				type=			"radius"
				canhitsource=	"true"

				damage=			"blast:8d6; momentum:3; WMD:4"
				minRadius=		"1"
				maxRadius=		"4"
				missileSpeed=	"0"
				lifetime=	"6"
				>

				<Effect>
					<Flare
						style=				"fadingBlast"
						radius=				"160"
						primaryColor=		"0xe0, 0x90, 0x80"
						/>
				</Effect>
			</Fragment>
		</Weapon>

	</ItemType>

	<ItemType UNID="&itBarrelBomb;"
			name=				"barrel bomb"

			level=				"2"
			value=				"25"
			mass=				"1000"
			frequency=			"common"
			numberAppearing=	"2d20"
			modifiers=			"Consumable; Missile; "

			description=		"A barrel of explosives and a primitive detonator, deployable from the cargo hold directly. "
			>

		<Image imageID="&rsItems1;" imageX="96" imageY="96" imageWidth="96" imageHeight="96"/>

	<Invoke key="B">
		(block (barrelbombthrow)
			; Create the thrown barrel bomb
			(setq barrelbombthrow
				(sysCreateWeaponfire &vtBarrelBombFire; gPlayership (objGetPos gSource) (add (random -8 8) (shpGetDirection gPlayership)) (rolldice 1 6) Nil) )

			; Identify the item (if not known)
			(itmSetKnown gItem)

			; Remove the item from the player's list
			(objRemoveItem gSource gItem 1)
		)
	</Invoke>

	</ItemType>

    <ItemType UNID="&itMinersSmugglingCargoHold;"
            name=               "ore smugglers cargo hold"
            level=              "6"
            value=              "9500"
            mass=               "2500"
            frequency=          "rare"
            numberAppearing=    "1"
            attributes=         "majorItem, MinersHold, illegal, smugglersHold"
            description=        "This hold has a mining scoop to being ore aboard along with several scan shielded hidden compartments to hide illicit goods."
            >

        <Image  imageID="&rsItems1;"
                imageX="96" imageY="192"
                imageWidth="96" imageHeight="96"
                />

	<CargoHoldDevice cargoSpace=		"30" >
		<Equipment>
			<Install equipment="miningComputer"/>
		</Equipment>
	</CargoHoldDevice>

</ItemType>

	<ItemType UNID="&itBioTechMod;"
			name=				"biotech mod"
			level=				"6"
			value=				"2500"
			mass=				"15"
			frequency=			"rare"
			numberAppearing=	"1d2"
			attributes=			"Consumable; humanTech, Meds, illegal"

			description=		"This container of nanotech and genetic biomods have been outlawed throughout human space."
			>

		<Image imageID="&rsItems1;" imageX="192" imageY="480" imageWidth="96" imageHeight="96"/>

		<!-- Installing these could have consequences, perhaps adding special minor powers, such
		as hacking/disabling weapons on enemy ships to slowing down time (increased reaction speed) temporarily. 

		You could also get caught... -->
	</ItemType>

	<ItemType UNID="&itBrainInAVat;"
			name=				"cymek brain in a vat"
			level=				"6"
			value=				"3500"
			mass=				"150"
			frequency=			"rare"
			attributes=			"communion, humanTech, info, soul, notForSale, illegal"

			description=		"Cymek industries pioneered the disincorporated individual, a human brain in a self sustaining vat. Whilst not illegal in and of themselves these living and thinking brains are illegal to trade."
			>

		<Properties>
			<Definition id="sisters.donateRel">180</Definition>
		</Properties>

		<Image imageID="&rsItems1;" imageX="192" imageY="480" imageWidth="96" imageHeight="96"/>
		
		<Language>
			<Text id="sisters.donateDesc">
				You see a medical facility and a laser scalpel followed by a screaming black 
				void, and finally a virtual world that feels empty and alone, a VR
				display shows a CCTV camera pointing at a loved one, your avatar waves,
				they wave back.
				
				You snap out of it. You feel the presence of Domina.
			</Text>
		</Language>
	</ItemType>

	<ItemType UNID="&itBetterThanLifeHeadset;"
			name=				"better-than-life headset"
			level=				"6"
			value=				"2000"
			mass=				"150"
			frequency=			"rare"
			attributes=			"humanTech, notForSale, illegal"

			description=		"A modified version of the Neuros Media Player, these headsets can create an adaptive virtual environment tailored to the individual, highly addictive these sets have led to people wasting away connected to them. The unscrupulous can use these for Red and Blue conditioning of unwilling minds, turning paradise to a nightmare and back again."
			>

		<Image imageID="&rsItems1;" imageX="288" imageY="0" imageWidth="96" imageHeight="96"/>
	</ItemType>


	<ItemType UNID="&itMetalBlitz;"
			name=				"flenser metal biltz"
			level=				"6"
			value=				"2500"
			mass=				"220"
			frequency=			"common"
                        numberAppearing=               	"1d4"
			modifiers=			"MajorItem; Illegal"

			charges=			"60"
			valueCharges=		"true"

			description=		"This is a disposable weapon system that uses uranium-235 pellets both as fuel and ammunition. It was made illegal shortly after going into production as it contaminates its targets."
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="480" imageWidth="96" imageHeight="96"/>

		<Weapon
				type=				"missile"
				launcher=			"true"

				damage=				"kinetic:4d8; momentum:2; WMD:3; radiation1"
				fireRate=			"7"
				missileSpeed=		        "90"
				lifetime=			"80"
				powerUse=			"2"
				charges=			"true"
                                deviceSlots=                    "1"

				directional=		        "true"
                                sound=				"&snRecoillessCannon;"
				
				>

			<Effect>
				<Image imageID="&rsMissiles3;" imageX="16" imageY="0" imageWidth="16" imageHeight="16" imageFrameCount="0" imageTicksPerFrame="0"/>
			</Effect>
		</Weapon>

		<Invoke>
			(intAutoInstall gSource gItem)
		</Invoke>
	</ItemType>

	<ItemType UNID="&itMiningComputerROM;"
			name=				"mining program ROM"
			attributes=			"humanTech, info, minorItem, shipEquipment"
			inherit=			"&baStdEquipmentItem;"

			level=				"3"
			frequency=			"uncommon"

			value=				"300"
			mass=				"1"
			unknownType=		"&itUnknownROM;, &itUnknownROMB;, &itUnknownROMC;"

			description=		"This mining ROM helps keep track of mined asteroids and candidate asteroids. To bring ore on board without loss install a mining cargo hold."
			>

		<Properties>
			<Constant id="rpg.equipment">'miningComputer</Constant>
		</Properties>

		<Image imageID="&rsItems1;" imageX="192" imageY="96" imageWidth="96" imageHeight="96"/>

		<Language>
			<Text id="rpg.equipmentInstalled">Mining program installed</Text>
			<Text id="rpg.equipmentNoEffect">Ship already has a mining program</Text>
			<Text id="rpg.equipmentRedundant">Installed redundant mining system</Text>
			<Text id="rpg.equipmentRepaired">Mining system repaired</Text>
		</Language>
	</ItemType>

	<!-- N.B This screen is needed because I could not get the name %autonName% variable
	to be set correctly in the dsNameAuton Dock Screen -->
	<DockScreen UNID="&dsNameHabitat;" nestedScreen= 	"true" >
		<Panes>
			<Default showTextInput=	"true" >
				<Actions>
					<Action id="actionName" default="1">
						(block ((theName (rpgSanitizeAutonName (scrGetInputText gScreen)))
								(theAuton (@ gData 'autonObject))
								)
							(objSetName theAuton (or theName (obj@ theAuton 'name)))
							(scrExitScreen gScreen)
							)
					</Action>
					
					<Action id="actionCancel" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>
		
		<Language>
			<Text id="actionName">[Enter] Name</Text>
			<Text id="actionCancel">[Esc] Cancel</Text>
		</Language>
	</DockScreen>

	<ItemType UNID="&itCymekLauncher;"
			name=				"Cymek Slug  Launcher"
			level=				"6"
			value=				"1100"
			mass=				"500"
			frequency=			"notrandom"
			modifiers=			"MajorItem;"

			description=		"This launcher uses a range missiles made out of ore and fabricated with the Cymek nano-fabricator. Designed to give ships with small reactors a way to punch above their weight class."
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="480" imageWidth="96" imageHeight="96"/>
		<Weapon
				fireRate=			"20"
				powerUse=			"2"
				launcher=			"true"
                                deviceSlots=                    "0"
				omnidirectional=		"true" 
				>

			<Missiles>

				<Missile ammoID="&itCymekTitaniumSlug;"
						type=			"missile"
						lifetime=		"80"
						damage=			"kinetic:2d6; WMD2"
						missileSpeed=	"60"
						hitPoints=		"15"
						directional=	"true"
						sound=				"&snRecoillessCannon;"
						>
					<Image imageID="&rsMissiles3;" imageX="16" imageY="0" imageWidth="16" imageHeight="16" imageFrameCount="0" imageTicksPerFrame="0"/>
				</Missile>

				<Missile ammoID="&itCymekUraniumSlug;"
						type=			"missile"
						lifetime=		"80"
						damage=			"kinetic:3d6; WMD3; radiation1"
						missileSpeed=	"60"
						hitPoints=		"15"
						directional=	"true"
						sound=				"&snRecoillessCannon;"
						>
					<Image imageID="&rsMissiles3;" imageX="16" imageY="0" imageWidth="16" imageHeight="16" imageFrameCount="0" imageTicksPerFrame="0"/>
				</Missile>

				<Missile ammoID="&itCymekBlastSlug;"
						type=			"missile"
						lifetime=		"80"
						damage=			"blast:3d6; WMD4;"
						missileSpeed=	"50"
						hitPoints=		"15"
						directional=	"true"
						sound=				"&snRecoillessCannon;"
						effect=				"&efBlastShellDefault;"
					>
				</Missile>

				<Missile ammoID="&itCymekIonSlug;"
						type=			"beam"
						lifetime=		"80"
						damage=			"ion:2d6; EMP4;"
						missileSpeed=	"50"
						hitPoints=		"15"
						directional=	"true"
						beamType=			"lightning"
						primaryColor=	"#a0f0ff"
						secondaryColor=	"#f0f0ff"
						intensity=			"1"
						directional=		"true"
						sound=				"&snLaserCannon;"
						>
				</Missile>

				<Missile ammoID="&itCymekParticleSlug;"
						type=			"beam"
						lifetime=		"80"
						damage=			"particle:2d6; WMD:4;"
						missileSpeed=	"50"
						hitPoints=		"15"
						directional=	"true"
						primaryColor=	"#a0f0ff"
						secondaryColor=	"#f0f0ff"
						intensity=			"1"
						directional=		"true"
						sound=				"&snLaserCannon;"
						effect=				"&efParticleBeamDefault;"
						>
				</Missile>
                                
                                <Missile ammoID="&itCymekAntimatterSlug;"
						type=			"beam"
						lifetime=		"120"
						damage=			"antimatter:2d6+2; WMD5"
						missileSpeed=	"90"
						hitPoints=		"15"
						directional=	"true"
						primaryColor=	"#f9ffb3"
						secondaryColor=		"#ff2a00"
                                                intensity=			"5"
						sound=			"&snLaserCannon;"
						beamType = "laser"
						>
				</Missile>
			</Missiles>
		</Weapon>
	</ItemType>

	<ItemType UNID="&itCymekTitaniumSlug;"
			name=				"Cymek Titanium Slug"
			level=				"1"
			value=				"1"
			mass=				"1"
			frequency=			"notrandom"
			numberAppearing=	"12d12"
			modifiers=			"Consumable; Missile"
			showReference=		"true"

			description=		"A titanium slug with enough reactor fuel for the internal Cymek launcher fusor to fire it at a considerable fraction of the speed of light."

			sortName=			"NAMI.40"
			>
		<Image imageID="&rsItems1;" imageX="0" imageY="96" imageWidth="96" imageHeight="96"/>
	</ItemType>

	<ItemType UNID="&itCymekUraniumSlug;"
			name=				"Cymek Uranium Slug"
			level=				"3"
			value=				"2"
			mass=				"1"
			frequency=			"notrandom"
			numberAppearing=	"12d12"
			modifiers=			"Consumable; Missile; Illegal"
			showReference=		"true"

			description=		"A uranium slug for use with the Cymek launcher. Do not handle for too long."

			sortName=			"NAMI.40"
			>
		<Image imageID="&rsItems1;" imageX="0" imageY="96" imageWidth="96" imageHeight="96"/>
	</ItemType>

	<ItemType UNID="&itCymekBlastSlug;"
			name=				"Cymek Blast Slug"
			level=				"3"
			value=				"2"
			mass=				"1"
			frequency=			"notrandom"
			numberAppearing=	"12d12"
			modifiers=			"Consumable; Missile;"
			showReference=		"true"

			description=		"A small shaped charge that can be fired from the Cymek launcher. "

			sortName=			"NAMI.40"
			>
		<Image imageID="&rsItems1;" imageX="0" imageY="96" imageWidth="96" imageHeight="96"/>
	</ItemType>

	<ItemType UNID="&itCymekIonSlug;"
			name=				"Cymek EMP Slug"
			level=				"4"
			value=				"4"
			mass=				"5"
			frequency=			"notrandom"
			numberAppearing=	"12d12"
			modifiers=			"Consumable; Missile; Military"
			showReference=		"true"

			description=		"A miniaturized Xenotite pump-charge EMP detonator capable of disabling many ships. "

			sortName=			"NAMI.40"
			>
		<Image imageID="&rsItems1;" imageX="0" imageY="96" imageWidth="96" imageHeight="96"/>
	</ItemType>

	<ItemType UNID="&itCymekParticleSlug;"
			name=				"Cymek Particle Slug"
			level=				"5"
			value=				"4"
			mass=				"1"
			frequency=			"notrandom"
			numberAppearing=	"12d12"
			modifiers=			"Consumable; Missile;"
			showReference=		"true"

			description=		"For ships with low power reactors particle beam weapons are often to energy intensive to use, these slugs produce lethal particles in the right launcher using an internal power source."

			sortName=			"NAMI.40"
			>
		<Image imageID="&rsItems1;" imageX="0" imageY="96" imageWidth="96" imageHeight="96"/>
	</ItemType>

	<ItemType UNID="&itCymekAntimatterSlug;"
			name=				"Cymek Anti Matter Slug"
			level=				"6"
			value=				"20"
			mass=				"5"
			frequency=			"notrandom"
			numberAppearing=	"12d12"
			modifiers=			"Consumable; Missile; Military"
			showReference=		"true"

			description=		"This slug is an antimatter inducer capable of throwing out a particle beam composed primarily of anti-protons."

			sortName=			"NAMI.40"
			>
		<Image imageID="&rsItems1;" imageX="0" imageY="96" imageWidth="96" imageHeight="96"/>
	</ItemType>

	<ItemType UNID="&itCymekSentinel;"
			name=				"CymekSentinel | CymekSentinels"
			attributes=			"auton, combatAuton, commonwealth, minorItem"
			inherit=			"&baAutonItemBase;"
			  
			level=				"3"
			frequency=			"notrandom"
			unknownType=		"&itUnknownAuton;"
			  
			value=				"750"
			mass=				"500"
			charges=			"0"
			massBonusPerCharge=	"1000"

			description=		"These light drones patterned after the AutoSentinel can be produced in quantity by the Cymek Nano-Fabricator and are suitable for light defense operations."
			>

		<Image imageID="&rsItems3;" imageX="192" imageY="192" imageWidth="96" imageHeight="96"/>
		
		<StaticData>
			<autonShipClass>&scCymekSentinel;</autonShipClass>
		</StaticData>
	</ItemType>

	<ShipClass UNID="&scCymekSentinel;"
			manufacturer=		"Cymek Industries"
			class=				"CymekSentinel"
			type=				""
			defaultSovereign=	"&svCommonwealth;"

			attributes=			"auton, combatAuton, genericClass"
			inherit=			"&baStdAutonBase;"
			>
		<Properties>
			<Definition id="autonItemType">&itCymekSentinel;</Definition>
		</Properties>

		<!-- Hull -->

		<Hull
			size=				"14"
			mass=				"1"
			cargoSpace=			"0"

			maxReactorPower=	"500"
			maxCargoSpace=		"0"
			maxDevices=			"1"

			maxArmor=			"light"
			stdArmor=			"light"
			/>

		<Reactor
			reactorPower=		"100"
			/>

		<Drive
			maxSpeed=			"30"
			thrust=				"30"
			/>

		<Maneuver
			maxRotationRate=	"18.0"
			rotationAccel=		"6.0"
			/>

		<!-- Configuration -->
		
		<Armor
			armorID=			"&itCymekNanoTitaniumArmor;"
			count=				"1"
			/>
		
		<Devices>
			<Device deviceID="&itCymekLaser;"/>
			<Device deviceID="&itCymekMicroDeflector;"/>
		</Devices>

		<!-- Image and Effects -->

		<!-- A custom image for this auton would be nice. -->
		<Image imageID="&rsAutosentinelHD2;" imageWidth="48" imageHeight="48" rotationCount="120" rotationColumns="12" viewportRatio="0.005625"/>
		<HeroImage imageID="&rsAutosentinelHero;" imageWidth="320" imageHeight="320"/>

		<!-- AI and Behavior -->

		<AISettings
			fireRateAdj=		"15"
			fireAccuracy=		"70"
			perception=			"4"
			noAttackOnThreat=	"true"
			noNavPaths=			"true"
			ignoreShieldsDown=	"true"
			/>
		
		<Language>
			<String id="DeployAck">"CymekSentinel v1984 online"</String>
		</Language>
	</ShipClass>

</TranscendenceExtension>

